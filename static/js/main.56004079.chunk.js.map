{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.jsx","components/MyHeader.jsx","containers/App.js","actions.js","constants.js","reducers.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardListDiv","glamorous","div","display","flexWrap","justifyContent","alignItems","width","margin","padding","CardList","robots","console","log","map","user","i","key","SearchBoxDiv","flexDirection","height","backgroundColor","borderRadius","boxShadow","border","outline","fontSize","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","React","Component","memo","title","App","searchTerm","useSelector","requestRobots","dispatch","useDispatch","onRequestRobots","useCallback","fetch","then","response","json","data","payload","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isPending","event","setSearchTermAction","target","value","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","logger","createLogger","collapsed","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.56004079.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport glamorous from 'glamorous'\nimport Card from './Card'\n\nconst CardListDiv = glamorous.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-evenly',\n  alignItems: 'center',\n  width: '100%',\n  margin: '0 auto',\n  padding: '0',\n  '@media (min-width: 768px)': {\n    width: '80%',\n  },\n  '@media (min-width: 1024px)': {\n    width: '60%',\n  },\n})\n\nconst CardList = ({ robots }) => {\n  console.log('CardList')\n  return (\n    <CardListDiv>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        )\n      })}\n    </CardListDiv>\n  )\n}\n\nexport default CardList\n","import React from 'react'\nimport glamorous from 'glamorous'\n\nconst SearchBoxDiv = glamorous.div({\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '20%',\n  height: '100%',\n  backgroundColor: '#f5f5f5',\n  borderRadius: '5px',\n  margin: '0.3rem auto',\n  padding: '10px',\n  boxShadow: '0px 0px 5px #888888',\n  '& input': {\n    width: '100%',\n    height: '100%',\n    border: 'none',\n    outline: 'none',\n    fontSize: '1.2em',\n    padding: '10px',\n    backgroundColor: 'transparent',\n    '&:focus': {\n      backgroundColor: 'transparent',\n    },\n  },\n})\n\nconst SearchBox = ({ searchChange }) => {\n  console.log('SearchBox')\n  return (\n    <SearchBoxDiv className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </SearchBoxDiv>\n  )\n}\n\nexport default SearchBox\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n","import React from 'react'\n\nfunction MyHeader({ title = 'RoboFriends' }) {\n  console.log('MyHeader.render()')\n  return <h1 className=\"f1\">{title}</h1>\n}\n\nexport default React.memo(MyHeader)\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css'\n\nimport { requestRobotsAction, setSearchTermAction } from '../actions'\nimport MyHeader from '../components/MyHeader'\n\nexport const App = () => {\n  const { searchTerm } = useSelector((state) => state.searchTerm)\n  const requestRobots = useSelector((state) => state.requestRobots)\n  const dispatch = useDispatch()\n\n  const onRequestRobots = useCallback(() => dispatch(requestRobotsAction(), []))\n\n  const onSearchTermChange = (event) => {\n    dispatch(setSearchTermAction(event.target.value))\n  }\n\n  useEffect(() => {\n    console.log('App.js useEffect, disptaching action')\n    onRequestRobots()\n  }, [])\n\n  const filteredRobots = requestRobots.robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchTerm.toLowerCase())\n  })\n\n  return requestRobots.isPending ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <MyHeader />\n      <SearchBox searchChange={onSearchTermChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n}\n\nexport default App\n","import { SET_SEARCH_TERM } from './constants'\n\nexport const setSearchTermAction = (searchTerm) => {\n  return {\n    type: SET_SEARCH_TERM,\n    payload: searchTerm,\n  }\n}\n\nexport const requestRobotsAction = () => (dispatch) => {\n  console.log('actions.js - requestRobotsAction', dispatch)\n  dispatch({\n    type: 'REQUEST_ROBOTS_PENDING',\n  })\n\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) =>\n      dispatch({\n        type: 'REQUEST_ROBOTS_SUCCESS',\n        payload: data,\n      }),\n    )\n    .catch((error) =>\n      dispatch({\n        type: 'REQUEST_ROBOTS_FAILED',\n        payload: error,\n      }),\n    )\n}\n","export const SET_SEARCH_TERM = 'SET_SEARCH_TERM'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import {\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  SET_SEARCH_TERM,\n} from './constants'\n\nconst initialStateSearch = {\n  searchTerm: '',\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n}\n\nexport const searchTermReducer = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case SET_SEARCH_TERM:\n      return { ...state, searchTerm: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const requestRobotsReducer = (\n  state = initialStateRobots,\n  action = {},\n) => {\n  console.log('requestRobotsReducer, action:', action, state)\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false }\n    default:\n      return state\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport 'tachyons'\n\nimport './index.css'\nimport App from './containers/App'\nimport { searchTermReducer, requestRobotsReducer } from './reducers'\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nconst logger = createLogger({\n  collapsed: true,\n})\n\nconst rootReducer = combineReducers({\n  searchTerm: searchTermReducer,\n  requestRobots: requestRobotsReducer,\n})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}